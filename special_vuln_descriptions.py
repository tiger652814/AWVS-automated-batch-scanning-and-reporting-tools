#special_vuln_descriptions.py
special_vuln_info = {
"易受攻击的 JavaScript 库": {
        "long_description": (
            "您当前正在使用一个或多个可能存在"
        ),
        "affects_detail": (
            "安全风险的JavaScript库"
        ),
        "description": (
            "。这些库的某些版本中已发现存在漏洞。"
        ),
        "impact": (
            "易受攻击的JavaScript库可能给开发者和最终用户带来许多安全风险。因为JavaScript广泛应用于网站、网络应用和其他在线服务，所以这些库中的漏洞可能影响众多用户。以下是一些易受攻击的JavaScript库可能带来的危害：\n"

            "1. 数据泄露：攻击者可能利用JavaScript库中的漏洞窃取用户数据，如用户名、密码、电子邮件地址等。这可能导致用户隐私泄露，甚至可能导致身份盗窃。\n"

            "2. 跨站脚本（XSS）攻击：攻击者可能利用JavaScript库中的漏洞向用户的浏览器注入恶意代码。这可能导致用户数据被盗、网站被篡改，甚至使用户的电脑受到恶意软件侵害。\n"

            "3. 代码注入攻击：攻击者可能利用JavaScript库中的漏洞向服务器或客户端注入恶意代码。这可能导致服务器崩溃、数据泄露或其他恶意行为。\n"

            "4. 供应链攻击：攻击者可能在JavaScript库的开发和分发过程中植入恶意代码。当其他开发者使用这些受损库时，可能导致他们的项目受到攻击。\n"

            "5. 分布式拒绝服务（DDoS）攻击：攻击者可能利用JavaScript库中的漏洞发起DDoS攻击，使目标服务器不堪重负，导致服务中断。\n"
        ),
    "recommendation": (
        "1. 更新库版本：如果已知漏洞的修复版本已经发布，可以将受影响的库更新为最新版本。\n"

        "2. 应用安全补丁：如果库的最新版本尚未修复漏洞，则可能需要应用安全补丁。这可以是一个临时解决方案，直到修复版本发布。\n"

        "3. 移除受影响的代码：如果漏洞是由于库中某些代码的错误而导致的，则可能需要移除受影响的代码或将其替换为更安全的代码。\n"

        "4. 增加输入验证：如果漏洞是由于对输入数据缺乏验证而导致的，则可能需要增加输入验证，以防止攻击者注入恶意数据。\n"

        "5. 实施安全最佳实践：遵循安全编程最佳实践，如减少依赖外部库、限制代码执行权限等，以增加项目的安全性。\n"

        "在修复漏洞之前，开发者应该先确认漏洞的确存在，并评估漏洞的影响和可能的修复方案。此外，开发者应该遵循安全编程的最佳实践，并定期对项目进行安全监控和测试，以及及时更新受影响的库版本。\n"
    ),
"已过时的 JavaScript 库": {
        "long_description": (
            "您的 Web 应用程序使用了过时的 JavaScript 库版本，但是最新版本的库已经"
        ),
        "affects_detail": (
            "发布。虽然您的版本可能没有发现任何安全漏洞，但是为了保持系统的安全性，我们建议您更新这"
        ),
        "description": (
            "些库到最新版本。最新版本通常包含了最新的安全修复和功能改进，能够提高系统的安全性和稳定性。"
        ),
        "impact": (
            "因为JavaScript广泛应用于网站、网络应用和其他在线服务，所以这些库中的漏洞可能影响众多用户。以下是一些易受攻击的JavaScript库可能带来的危害：\n"

            "1. 数据泄露：攻击者可能利用JavaScript库中的漏洞窃取用户数据，如用户名、密码、电子邮件地址等。这可能导致用户隐私泄露，甚至可能导致身份盗窃。\n"

            "2. 跨站脚本（XSS）攻击：攻击者可能利用JavaScript库中的漏洞向用户的浏览器注入恶意代码。这可能导致用户数据被盗、网站被篡改，甚至使用户的电脑受到恶意软件侵害。\n"

            "3. 代码注入攻击：攻击者可能利用JavaScript库中的漏洞向服务器或客户端注入恶意代码。这可能导致服务器崩溃、数据泄露或其他恶意行为。\n"

            "4. 供应链攻击：攻击者可能在JavaScript库的开发和分发过程中植入恶意代码。当其他开发者使用这些受损库时，可能导致他们的项目受到攻击。\n"

            "5. 分布式拒绝服务（DDoS）攻击：攻击者可能利用JavaScript库中的漏洞发起DDoS攻击，使目标服务器不堪重负，导致服务中断。\n"
        ),
        "recommendation": (
            "1. 更新库版本：如果已知漏洞的修复版本已经发布，可以将受影响的库更新为最新版本。\n"

            "2. 应用安全补丁：如果库的最新版本尚未修复漏洞，则可能需要应用安全补丁。这可以是一个临时解决方案，直到修复版本发布。\n"

            "3. 移除受影响的代码：如果漏洞是由于库中某些代码的错误而导致的，则可能需要移除受影响的代码或将其替换为更安全的代码。\n"

            "4. 增加输入验证：如果漏洞是由于对输入数据缺乏验证而导致的，则可能需要增加输入验证，以防止攻击者注入恶意数据。\n"

            "5. 实施安全最佳实践：遵循安全编程最佳实践，如减少依赖外部库、限制代码执行权限等，以增加项目的安全性。\n"

            "在修复漏洞之前，开发者应该先确认漏洞的确存在，并评估漏洞的影响和可能的修复方案。此外，开发者应该遵循安全编程的最佳实践，并定期对项目进行安全监控和测试，以及及时更新受影响的库版本。\n"
        ),
    },
    },
}